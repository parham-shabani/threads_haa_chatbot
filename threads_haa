from typing import Final
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import requests
TOKEN: Final = '6119100110:AAH4NeeiD9RTTuyh32v33DuMIHnvep63OPE'
BOT_USERNAME: Final = '@ThreadsHaabOT'

#Tweet_scrape

def tweet_scrape(link):
  url = "https://twitter135.p.rapidapi.com/v2/Tweet/"

  querystring = link

  headers = {
  	"X-RapidAPI-Key": "48e63a2553mshdecfd29b244b388p123f6fjsnb5d883ec1c98",
  	"X-RapidAPI-Host": "twitter135.p.rapidapi.com"
  }

  response = requests.get(url, headers=headers, params=querystring)

  print(response.json())

# Commands
async def add_thread_command(update: Update,
                             context: ContextTypes.DEFAULT_TYPE):
  await update.message.reply_text('Send us the link of the tweet or thead')


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
  await update.message.reply_text('Welcome to our bot my friend')


# Response


def handle_response(text: str) -> str:
  processed: str = text.lower()

  if 'hello' in processed:
    return 'Hey there!'

  if 'how are you' in processed:
    return 'I am Good'

  if 'twitter.com/' in processed:
    return 'Thank you for sending us a funny tweet.'

  if 'www.threads.net/' in processed:
    return 'Thank you for sending us a funny thread.'

  return 'I do not understand what you wrote !!!'


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
  message_type: str = update.message.chat.type
  text: str = update.message.text
  tweet_link : str = ''
  tweet_detail = {"id":""}
  if 'twitter.com' in text :
    tweet_link = text
    tweet_info = tweet_link.split("/")
    user_id = tweet_info[3] # account_name
    tweet_id = tweet_info[5] # tweet_id
    if '?' in tweet_id:
      tweet_id = tweet_id.split('?')[0]
    tweet_detail["id"]=tweet_id
    tweet_scrape(tweet_detail)
    
    

  print(f'User ({update.message.chat.id}) in {message_type}: "{text}"')

  if message_type == 'group':
    if BOT_USERNAME in text:
      new_text: str = text.replace(BOT_USERNAME, '').strip()
      response: str = handle_response(new_text)
    else:
      return
  else:
    response: str = handle_response(text)

  print('Bot', response)
  await update.message.reply_text(response)


async def error(update: Update, context: ContextTypes.DEFAULT_TYPE):
  print(f'Update {update} caused error {context.error}')


if __name__ == '__main__':
  app = Application.builder().token(TOKEN).build()

  # Commands
  app.add_handler(CommandHandler('start', start_command))
  app.add_handler(CommandHandler('add_thread', add_thread_command))

  # Messages
  app.add_handler(MessageHandler(filters.TEXT, handle_message))

  # Log all errors
  app.add_error_handler(error)

  print('Polling...')
  # Run the bot
  app.run_polling(poll_interval=1)

